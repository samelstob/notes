
python generate.py problem.py 3 3

python main.py problem.py

i still don't understand why divide and conquer is better than linear for peak 
finding

with two randomly generated numbers what is the probability that b>=a

A - range of random numbers for a
B - range of " " b

Number of combinations = AB

e.g. 10 X 10 = 100

0 0-9 - 10 possibilities
1 1-9 - 9 possibilities
2 2-9 - 9 "

9 9 -  1 

sum of 1-10 = (n+1)*n/2 = (10+1)*10/2 = 11 * 5 = 55/100

0 1-9 - 9
1 2-9 - 8
2 3-9 - 7
9 -   - 0

sum of 1-9 = 45

    45%  10%  45%

Probability of a and b being equal is |∩(A B)|/|A|.|B|

e.g.            |∩([0-9] [0-9])| / |[0-9]|.|[0-9]|
            =   10 / 10.10
            =   10/100 

A   [0-1]
B   [2-3]

        |∩([0-1] [2-3)| / 2.2
        |∅| / 4
        0

if A and B are equal then

Probability of a and b being equal is |A| / |A|²  = 1 / |A|

    A   Probability
    0   0           0
    1   1           1
    2   2/4         1/2
    3   3/9         1/3
    4   4/16        1/4
    5   5/25        1/5
    6   6/36        1/6


for large numbers a>b versus a>=b is the same

so why is divide and conquer better than linear search for 1d peak finding?

the only way it can be better is if a step is guaranteed to take you closer to 
a peak

in binary search, each step eliminates half the search space and it is clear 
that the remaining half contains the element if it exists

With peak finding can we show a counter example

    6 5 6 5 4 5 5 4 3
    ^   ^

In the above example divide and conquer peak finding will incorrectly return 
no peak "50%" of the time the algorithm will choose the right half of the 
list.

Could an algorithm be developed that performs better than linear for this 
problem?  I suspect not.

There is no information about where a peak lies from looking at an individual 
element.  Even in the case that a < b < c ? d the fact that c > b provides no 
information about d.  Also it has no effect on whether d - the analogy is coin 
tossing.  If I throw three coins a b c.  If b is different to a, it provides 
no information about c.

It is only if the problem is "peak and plateau finding" that a divide and 
conqueur helps.


In the above case the divide and conquer approach will take the following 
steps

    6 5 6 5 4 5 5 4 3
            ^>

            4 5 5 4 3 Peak and/or plateau
                ^
Comparing strict Peak Finding (PF) with Peak or Plateau finding (PoP)

  b)  1 1 1 1 1 1 1 1 1
      ^ ^ ^ ^ ^ ^ ^ ^ ^

With strict PF there are no peaks, with PoP everything is a peak.

  c)  9 8 7 6 5 4 3 2 1
      ^

PF 9 is a peak, PoP 9 is a peak

# Thoughts

I'm still not convinced that PoP can be solved by divide and conquer.  I don't 
see how looking at an individual element provides information about which half 
contains a peak

    a > b > c
        ^
In the case that a is larger than b, we choose to look in the left half

"Homework question: Argue that any array will always have a peak"

What is the conclusion?

1d PoP isn't a very interesting problem

Is 2D PoP interesting?
