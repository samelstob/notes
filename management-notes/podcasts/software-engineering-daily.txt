# Hadoop: Past, Present and Future with Mike Cafarella

HDFS or something like will be around for a very long time.  A distributed, 
low cost, hierarchical file system that exposes a hierarchical unix style 
interface to the user - that's going to be around for ever.

There's a handful of performance improvements you would like to have e.g. can 
I have indexes.

We are seeing the slow agonising death of Map Reduce.  People are not really 
writing Map Reduce jobs any more.

Map Reduce was envisioned as "a for loop replacement" - the use case was 
building web crawler inverted indexes.  It was not envisioned for analytics.

Objections from Stonebraker et al. "one step forward, two steps back" - in 
retrospect the need for higher language was correct

"The projects with the biggest impact have an element of system building and 
element of intellectual contribution.  If you want the biggest possible impact 
on the world you have to use both weapons.  There is always a way to figure 
out how to do it no matter what venue you are in"

Yarn

Dryad (Microsoft Research) had a very clean distinction between the 
programming model it exposed and the execution framework.

If you want a data flow that doesn't look like the traditional map reduce data 
flow (disk -> mapper -> shuffle -> reducer) if you want five loops of that in 
a row for some ML task that data flow graph can be more complicated than map 
reduce ever imagined.  Pig tends to tie itself in knots trying to do this - 
it's not the most natural way to do it.

Spark - unbelievable impact on things.  People were using MapReduce in a way 
that the MR implementation was not really keeping up with.

Spark performance is better but it's the terminal interaction that I think is 
best thing.

Could have been designed without a central coordinator?  You can a single 
node, or a group of nodes, or some kind of cooperation over the entire 
cluster.

Nowadays no one runs a single name node, but does it have to be the entire 
cluster?

# 2015/10/12 Replacing Hadoop with Joe Doliner

https://medium.com/pachyderm-data/lets-build-a-modern-hadoop-4fc160f8d74f#.3emocljp6

* A number of things are outdated about Hadoop
    - The software project is developed by a million different companies with 
      a million different goals.  You don't get this cohesive API that's 
      really fun to use.
    - From a software engineering level - they basically had to create all of 
      the distributed systems code from scratch because nothing like that 
      existed.  They have their own scheduler (Yarn), discovery service.  You 
      really want someone dedicated to making them generic and good.

* Facebook forked Hadoop six years ago and kept it closed source.  "A bunch of 
  little things that didn't quite fit their use case.  No big ideological 
  difference about merging - just too many man hours"

* "At Airbnb - a huge number of outages from Zookeeper.  No one we could talk 
  to - no company has Zookeeper as their product.  These things never get 
  fixed and they never get really good."

* "Zookeeper is coupled to Hadoop because they have been in close proximity 
  for a very long time - little specific things that Hadoop needs have crept 
  into Zookeeper."

* Containerising Hadoop is problematic

* Maintaining a consistent environment is one of the big challenges of running 
  a Hadoop cluster.  You are getting a string of emails from data scientists 
  "I just wrote this job that requires Python 2.3".  It isn't a fun job to 
  install dependencies on a 1000 machine Hadoop customer."

* HDFS Namenode - writing a bunch of small files swamps the name node

* Pachyderm File System (PFS) is a COW filesystem like git.  This allows 
  collaboration.

* A best practice in Hadoop land is to run entirely separate clusters.  
  Production and dev.  Moving things over from dev to prod is a hugely manual 
  process.

* In Hadoop it's this very internal magical thing that allows them to achieve 
  data locality.

* Hadoop uses - very different picture in each company.  Like MS Word - 
  billion features and each user uses a different 5%.

* "There are a lot more people who have the problem Hadoop solves, than there 
  are using Hadoop."

* "At Airbnb we thought we were going to setup a Hadoop cluster.  2.5 years 
  later this was a team of 20 people and we still weren't quite to the point 
  where we felt like we have it under control and it just works for us.  You 
  can't run a Hadoop cluster without this team of 20 people that basically 
  just kick it when it falls over."

* "Cloudera makes it easier, but it is still incredibly complicated.  Cloudera 
  have built a ML classifier which classifies configurations as stable or 
  unstable.  Configuring Hadoop is so incredibly complicated that there is no 
  human who understands what makes a configuration stable or unstable.  We have 
  actually had to resort to a classifier to solve that problem".

* "Cloudera definitely offers a lot of really good resources to make running 
  Hadoop easier but I don't think they are solving the fundamental problem.  
  To solve that we need a big leap forward."

* "I want you guys to become sales engineers."

* Letters of intent - removes "there is nobody in the world who has the 
  slightest bit of interest in this"

# 2016/03/15 State of Programming with Jeff Atwood

* "How do I build something that will look like a smart choice 10 years from 
  now"
* "Look at usage.  Look at what people have built using x or y"
* 37 signals didn't think about deployment.  RoR didn't think about 
  deployment.  Docker allowed discourse to solve deployment problems.
    - "Went from being a support nightmare
* "Ruby virtualised awfully - like 40% performance loss"
* .NET "When you start has a huge impact on where you go" MS are so late to 
  the Open Source party.
* Stack Overflow SQL server licensing $0.5M licensing fees per year
* SQL server "optimise for unknown" (don't use stats - sounds like RBO or 
  dynamic sampling)
* "Linux is free if your time is worthless"
* "Co-location is insanely cheap"
* "Code is low on my list of problems"
* Email is identity.  Open ID failed because people didn't understand a URL as 
  an identity
* Facebook versus Google "Don't listen to what they tell you, watch what they 
  actually do"
* "If you want to figure out if you really know your stuff, try to teach it 
  somebody, then you will find very rapidly whether you really know your 
  stuff"
* "All we are really doing is pushing the boulder along so people can stand on 
  our shoulders"
* "The next billion users - diversity
* "If everybody on your team knows every word of lord of the rings, it's not 
  really a diverse team"

# 2016/04/26 Azure Event Hubs and Kafka with Dan Rosanova

* Don't want a direct dependency between publisher and subscriber (or producer 
  consumer) because they will have to be matched scale and speed wise.

* May want to read events more than once

* EventHubs and Kafka chose not to use HTTP

* Typical message queues - every message that comes in, you acknowledge when 
  it's been read
* With EH you don't acknowledge individual messages, it's a time retention 
  buffer
* Replication between regions with ordering consistency and low latency is 
  very difficult (laws of physics)
* Load balancing in Kafka is manual, in EH it is included
* Kafka uses a proprietary protocol, EH uses AMQP
* HTTP limits what you can do with flow control and retransmission - these 
  shortcomings are bad when you get to high scale system.
* AMQP is an ISO, IEC, OASIS standard
    - Even though it can be a difficult protocol to undertand, the flow 
      control system is excellent.  It is a credit based system
* EventHubs was always designed to be a sub-second system whereas Kinesis was 
  not
* Kinesis, pay hourly rate per shard
* Google Cloud Pub-Sub - Kind of like EH, kind of like ServiceBus.  Each of 
  the big players has taken a slightly different approach to this challenge.
* Pub-Sub allows many many many subscribers.  EH is less about subscribers but 
  more about throughput.
* Azure is not Windows specific
* Polyglot cloud started with SaaS
* Microsoft is not trying to run the car business and the television business, 
  we are trying to put a platform in place that people on those industries can 
  run their platforms on.  Building a scalable highly available platform is 
  very challenging.  If we can do a little bit to alleviate the cost and pain 
  of that then we will rapidly increase the speed at which innovation happens 
  on top of that platform.
* The people on those industries are the ones who will drive innovation.  
  Until we make it easy for them to do that they have to make very risky big 
  bets.

# 2016/01/08 Language Design with Brian Kernighan

* AWK - still widely used - core unix tool
* 50 years - Forton, COBOL, BASIC
* Java - strongly hyped
* Co-routines
* "OS pushing it - not sure about memory management, but if I were going to 
  write a compiler I'd think pretty seriously about Go"
* "It's hard to write books and it's hard to learn a language.  It takes a 
  long time to internalise a language and play it back in a form that will be 
  useful for another programmer."
* Writing a book about a programming language "Difficult to find linear path 
  through something that is not intrinsically linear".
* Getting a good collection of examples that are realistic, big enough to be 
  interesting (not just syntax) is tough
* Plan 9 - attempt to take lessons learned in Unix and make something 
  cleaner, better, more elegant
    - Pushed idea of filesystem as unifying model: Network connections, shell 
      environment variables - environment is a directory, shell variables were 
      files, windows system - various windows were files
    - Portability - run code without any change on different architectures
    - Unicode - UTF-8 - Invented by Ken Thomson and Rob Pike
* Plan 9 wasn't going to make your life X10 better
* Plan 9 didn't make it easy if you don't do it their way e.g. didn't support 
  stdio
* Linear pipelines (Unix) work well for certain kinds of tasks but not others
* K&R
    - 1973 - first version of C
    - 1978 - K&R book
    - Tutorial I had written formed first chapter
    - Often computer science ends up in whichever department had the first 
      computer
* Might be a level of literacy that everyone will have

# Origin of Devops with Johan and Damon from DevOps Cafe 2016/08/31

Damon: Fast talking!, John medium

* Damon "It's a cultural-professional movement.  It's not a specific 
  methodology or set of tools.  It's a concept that we are all part of the 
  value stream.  Ideas turned into running features in customer facing 
  environments.  Bottlenecks, inefficiencies, risk - things that get in the way 
  of us delivering quicker and more reliably.  Devops is about identifying 
  what those things are, talking about those problems, figuring them out 
  together, and going and solving them so people can deliver software and 
  services faster and more reliably."

* John "Directly lineage to lean.  All the things that came out of 
  manufacturing - flow and delivery maps to lean."

* Damon "Devops is not about the technology - it's about the business - it's 
  about solving the problems that we are here to solve - giving the customer 
  what they want, when they want it, at the lowest cost possible"

* History of Devops - Patric Dubois - wanted to do every kind of job.  
  Velocity 2009 - "Dev and Ops 10 + deploys a day at Flikr".  Patrick put 
  together an event - DevOpsDays.  Conversation continued as #devops

* John "A lot of us who had been in operations for years we felt like we had 
  not really been helping anybody."

* Eric Ries - Lean startup.
* Convergence called devops

* Less wasted effort, less wasted time, less stuff getting in the way.  
  Picture the delivery process as a factory - a supply chain.  What are the 
  things that get in the way, what are the things that slow us down, cause 
  re-work to come back at us, what are the things that cause long delays, what 
  causes us to undermine ourselves and cause instability.  Stop doing them.

* "Agile got reduced to scrum and missed the point in the first place.  If all 
  you do is scrum and read the agile manifesto you would think they are two 
  different things.  Scrum became a specific thing, a project management 
  methodology.  It got so focussed on that particular domain that it missed 
  the end to end picture.

* "Most business are not in the business of writing software.  If you are not 
  looking at the end to end picture you may not have the best service delivery 
  capabilities.

* "You see a lot of big organisations stuck in water-scrum-fall.  Massive 
  batch planning up front, agile dev, then batched up to monthly or quarterly 
  releases to operations.  Step back - you are not agile as an organisation.  
  Still back in the old waterfall - we just develop the software differently."

* "Has anything changed for the customer, no not really"

* "Trying to eliminate waste.  Trying to see the full value stream."

* Most important design patterns
* "What would it take to get a single idea (a single line of code) to get 
  through the standard process"

# Distributed Tracing with Reshmi Krishna

* Breaking an application into microservices creates a debugging challenge
* Latency analysis across microservices - need to have a baseline
* Span = a single call
* Zipkin - open source tracing - collector, storage, query, web UI
* 
